/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: LoÃ¯c Norgeot (https://sketchfab.com/norgeotloic)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/need-some-space-d6521362b37b48e3a82bce4911409303
Title: Need some space?
*/

import React, { useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import * as THREE from 'three';


// Utility function to create a circular texture
const createCircleTexture = (size = 64) => {
  const canvas = document.createElement('canvas');
  canvas.width = size;
  canvas.height = size;

  const ctx = canvas.getContext('2d');
  ctx.fillStyle = 'white';
  ctx.beginPath();
  ctx.arc(size / 2, size / 2, size / 2, 0, Math.PI * 2);
  ctx.fill();

  const texture = new THREE.CanvasTexture(canvas);
  texture.needsUpdate = true;
  return texture;
};

export default function Model() {
  const { nodes, materials } = useGLTF('/need_some_space.glb');
  const [circleTexture, setCircleTexture] = React.useState(null);

  useEffect(() => {
    // Create the circular texture once the component mounts
    const texture = createCircleTexture();
    setCircleTexture(texture);
  }, []);

  function getRandomColor() {
    // Generate a random hex color
    const newColor = new THREE.Color(Math.random(), Math.random(), Math.random())
    return newColor;
  }
  //A nice light pink isColor: true, r: 0.9805561827570048, g: 0.7177077163557677, b: 0.7793812208031659}

  //React.useEffect(() => console.log("nodes.Object_2.geometry", nodes.Object_2.geometry, "nodes", nodes, "materials", materials), []);

  function setRandomColors(geometry) {
    const colors = [];
    for (let i = 0; i < geometry.attributes.position.count; i++) {
      colors.push(Math.random(), Math.random(), Math.random());
    }
    geometry.setAttribute('color', new THREE.BufferAttribute(new Float32Array(colors), 3));
  }

  React.useEffect(() => {
    // Apply random colors to the geometry
    if (nodes.Object_2.geometry) {
      setRandomColors(nodes.Object_2.geometry);
    }
  }, [nodes]);


  useEffect(() => {
    // My rudimentary adding random colors
    // for (let i = 0; i < 50000; i++) {
    //   if (i < 10000) {
    //     nodes.Object_2.geometry.attributes.color.array[i] = 0.50;
    //   } else {
    //     nodes.Object_2.geometry.attributes.color.array[i] = Math.random();
    //   }
    // }


    // I don't think it is being used anymore to edit the material at pointsMaterial, might need to set some of these properties here 
    // rather than the JSX though
    //console.log("materials", materials)
    // Object.values(materials).forEach((material) => {
    //   material.color = new THREE.Color('#FFEF3F');
    //   material.emissive = new THREE.Color('#0000FF'); // Set emissive color to blue
    //   material.emissiveIntensity = 10; // Adjust the emissive intensity for glow effect
    //     material.size = 1;
    //   material.toneMapped = true;
    //   material.fog = false;
    //   material.blending = THREE.AdditiveBlending
    //   material.sizeAttenuation = true;
    // });
  }, [materials]);
  return (
    <points
      geometry={nodes.Object_2.geometry}
      // material={materials['Scene_-_Root']}
      rotation={[-Math.PI / 2, 0, 0]}
      position={[-30.5, -36, 30]}
      scale={0.3}
    >
      {circleTexture && <pointsMaterial
        attach="material"
        vertexColors={getRandomColor()}
        color={new THREE.Color(0xffffff)} // getRandomColor()} 
        emissive={new THREE.Color(0xffffff)}//new THREE.Color(0x6A0DAD)} // Blue glow color
        emissiveIntensity={5.8} // Adjust the intensity of the glow
        size={0.05}
        sizeAttenuation={true} // Make the stars decrease in size with distance
        blending={THREE.AdditiveBlending} // Make the stars glow
        transparent={true} // Make the points transparent for glow effect
        opacity={1}
        depthTest={true}
        depthWrite={false} // Avoid depth writing to prevent "flickering" effects
        map={circleTexture}
      />
      }
    </points>
  )
}

useGLTF.preload('/need_some_space.glb')